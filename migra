#!/usr/bin/env php
<?php
/**
 * @name MigraPHP
 * @author Kutsevalov Konstantin (adamas.antares)
 * @license MIT
 *
 * Don't ask about features, just do pull request
 */

define('MPATH', getcwd());

/**
 * @class MigraPhp
 */
class MigraPhp
{

    const STATUS_INACTIVE = 0;
    const STATUS_APPLIED = 1;
    const STATUS_FAILED = 2;

    /**
     * @var int
     */
    private $errorCode = 0;

    /**
     * @var bool
     */
    private $configured = false;

    /**
     * @var array
     */
    private $config = [];

    /**
     * @var string
     */
    private $table = '_migra';

    /**
     * @var array
     */
    private $migrations = [];

    /**
     * Allowed terminal commands
     * @var array
     */
    private $commands = ['link', 'help', 'config', 'apply', 'up', 'revert', 'down', 'create', 'delete', 'status'];

    /** @var PDO */
    private $db = null;

    /**
     * @var string
     */
    private $username = '';


    public function __construct($argv)
    {
        // check config
        $default = $this->getDefaultConfig();
        if (is_dir(MPATH . '/migrations') && is_file(MPATH . '/migrations/.config')) {
            $config = require(MPATH . '/migrations/.config');
            if (!is_array($config)) {
                $this->errorCode = 60;
                ech("   Empty or corrupted configuration file\n", 'red');
                return;
            } else {
                $this->configured = true;
            }
            $this->config = array_replace_recursive($default, $config);
            // test connection
            $res = $this->connect();
            if ($res !== true) {
                ech('DB connection failed: ' . $res . "\n", 'red');
                return;
            }
        }
        $this->username = @$config['username'];
        $this->doCommand($argv);
    }

    /**
     * @return bool|string
     */
    private function connect()
    {
        $default = $this->getDefaultConfig();
        $c = array_replace_recursive($default, $this->config);
        try {
            $conn = "mysql:host={$c['db']['host']};dbname={$c['db']['name']};port={$c['db']['port']};charset=UTF8";
            $this->db = new PDO($conn, $c['db']['user'], $c['db']['password']);
        } catch (PDOException $e) {
            return $e->getMessage();
        }
        return true;
    }


    /**
     * @param bool $short
     * @param bool $isInstalled
     */
    public function help($short = false, $isInstalled = true)
    {
        if (!$isInstalled) {
            ech("  Need to initalize first. Use command:\n", 'yellow');
            ech("   $ ./migra config\n", 'white');
            ech("   OR\n", 'yellow');
            ech("   $ ./migra config [database] [dbuser] [dbpassword] [dbhost] [dbport] - all parameters is optional\n", 'white');
            ech("  for initialize or configure MigraPHP.\n", 'yellow');
            ech("", 'white');
            return;
        }

        ech("Use:\n", 'light_cyan');
        ech("   ./migra config [database] [dbuser] [dbpassword] [dbhost] [dbport] - configure PDO connection\n", 'cyan');
        ech("   ./migra status {number}\n", 'cyan');
        ech("   ./migra create {migration_name} - create migration\n", 'cyan');
        ech("   ./migra apply|up {number} - apply last {number} of migrations\n", 'cyan');
        ech("   ./migra revert|down {number} - revert last {number} of migrations\n", 'cyan');
        ech("   ./migra delete {number} - revert and delete last {number} of migrations\n", 'cyan');
        ech("", 'white');

        if ($short) return;

        // todo detailed help...

    }

    /**
     * @return int
     */
    public function getErrorCode()
    {
        return $this->errorCode;
    }

    /**
     * @param array $argv
     */
    private function doCommand($argv)
    {
        // check arguments
        if (empty($argv[1]) || !in_array($argv[1], $this->commands)) {
            ech("Wrong command.\n", 'red');
            $this->help(true, true);
            $this->errorCode = 5;
            return;
        }
        if ($argv[1] == 'help') {
            $this->help(false, true);
            return;
        } else if ($argv[1] == 'link') {
            $this->createSoftLink();
            return;
        }
        // check is configured
        if ($this->configured == false || $argv[1] == 'config') {
            if ($argv[1] == 'config') {
                $this->doConfigure($argv);
            } else {
                $this->help(true, false);
                $this->errorCode = 10;
            }
            return;
        }

        $this->loadMigrations();

        // execute command
        $num = !empty($argv[2]) && is_numeric($argv[2]) ? intval($argv[2]) : null;
        switch ($argv[1]) {
            case 'create';
                if (!empty($argv[2])) {
                    $this->createMigration($argv[2]);
                } else {
                    ech("Empty name!\n", 'red');
                    ech(" Example: ", 'cyan');
                    ech("./migra create {name}\n", 'white');
                    $this->errorCode = 2;
                    return;
                }
                break;
            case 'apply'; case 'up';
                $this->applyMigration($num);
                break;
            case 'revert'; case 'down';
                $this->revertMigration($num);
                break;
            case 'delete';
                $this->deleteMigration($num);
                break;
            case 'status';
                $this->migrationsStatuses();
                break;
            case 'link';
                $this->createSoftLink();
                break;
        }
    }

    /**
     * @return array
     */
    private function getDefaultConfig()
    {
        return [
            'db' => [
                'name' => 'project',
                'user' => 'root',
                'password' => '',
                'host' => 'localhost',
                'port' => '3306',
            ],
            'username' => 'Unknown',
        ];
    }

    /**
     * @param array $argv
     */
    private function doConfigure($argv)
    {
        // $argv: [2 database] [3 dbuser] [4 dbpassword] [5 dbhost] [6 dbport]
        $config = empty($this->config['db']) ? $this->getDefaultConfig() : $this->config;
        if (!empty($argv[2])) {
            $config['db']['name'] = $argv[2];
        } else {
            $config['db']['name'] = input('Enter database name: ', 'cyan');
        }
        if (!empty($argv[3])) {
            $config['db']['user'] = $argv[3];
        } else {
            $config['db']['user'] = input('Enter db user name: ', 'cyan');
        }
        if (!empty($argv[4])) {
            $config['db']['password'] = $argv[4];
        } else {
            $config['db']['password'] = input('Enter db password: ', 'cyan');
        }
        if (!empty($argv[5])) {
            $config['db']['host'] = $argv[5];
        } else {
            $host = input('Enter db host [localhost]: ', 'cyan');
            if (!empty($host)) {
                $config['db']['host'] = $host;
            }
        }
        if (!empty($argv[6])) {
            $config['db']['port'] = $argv[6];
        } else {
            $post = input('Enter db port [3306]: ', 'cyan');
            if (!empty($post)) {
                $config['db']['port'] = $post;
            }
        }
        ech(" Result configuration:\n", 'cyan');
        foreach ($config['db'] as $param => $value) {
            ech("   {$param}: ", 'yellow');
            echo "'{$value}'\n";
        }
        ech(" Test connection ... ", 'cyan');
        $this->config = $config;
        $res = $this->connect();
        if ($res !== true) {
            ech('DB connection failed: ' . $res . "\n", 'red'); echo "";
            $this->errorCode = 1000;
            return;
        } else {
            ech("Success!\n", 'green'); echo "";
        }
        if (!$this->configured) { // is first configure?
            // try to get username
            $username = getenv('username');
            if (empty($username)) {
                $res = shell_exec('git config user.name');
                if (stripos($res, 'not found') === false) {
                    $username = trim($res);
                } else {
                    $username = 'Unknown';
                }
            }
            $config['username'] = $username;
            if (!is_dir(MPATH . '/migrations')) {
                mkdir(MPATH . '/migrations');
            }
            if (!is_file(MPATH . '/migrations/.gitignore')) {
                file_put_contents(MPATH . '/migrations/.gitignore', ".gitignore\n.config\n.history");
            }
            // create table
            $migration = new MigrationObject($this->db);
            if (!$migration->isTablesExists($this->table)) {
                $migration->createTable($this->table, [
                    "`id` INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT",
                    "`created_at` INT UNSIGNED NOT NULL DEFAULT '0'",
                    "`name` VARCHAR(255) NOT NULL",
                    "`status` TINYINT(1) NOT NULL",
                    "`author` VARCHAR(50) NOT NULL",
                ]);
            }
        }
        // save
        $php = "<?php\n// MigraPHP configuration\nreturn " . var_export($config, true) . ";\n";
        file_put_contents(MPATH . '/migrations/.config', $php);
        ech("Configure completed\n", 'cyan');
    }


    /**
     * Load exists migrations
     */
    private function loadMigrations()
    {
        // check "_migra" table
        $migration = new MigrationObject($this->db);
        if (!$migration->isTablesExists($this->table)) {
            // create table and move all history in
            $migration->createTable($this->table, [
                "`id` INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT",
                "`created_at` INT UNSIGNED NOT NULL DEFAULT '0'",
                "`name` VARCHAR(255) NOT NULL",
                "`status` TINYINT(1) NOT NULL",
                "`author` VARCHAR(50) NOT NULL",
            ]);
        }
        // check old history file
        $file = MPATH . '/migrations/.history';
        if (is_file($file)) {
            ech("   Moving migrations history from file '.history' to table 'migra'\n", 'yellow');
            // migrate history to table
            $lines = file($file);
            foreach ($lines as $line) {
                if (empty(trim($line)) || substr($line, 0, 1) == '#') continue;
                $line = explode(';', $line); // time;name;status;author
                $migration->insert($this->table, [
                    'created_at' => trim($line[0]),
                    'name' => trim($line[1]),
                    'status' => trim($line[2]),
                    'author' => trim($line[3]),
                ]);
            }
            // delete old history file
            @unlink($file);
        }
        // load migrations list
        $res = $this->db->query("SELECT * FROM `_migra`");
        foreach($res->fetchAll() as $migration) {
            $this->migrations[ $migration['name'] ] = [
                'id' => $migration['id'],
                'time' => $migration['created_at'],
                'name' => $migration['name'],
                'status' => $migration['status'],
                'author' => $migration['author'],
            ];
        }
        // search new files
        $files = glob(MPATH . '/migrations/*.php');
        if (!empty($files)) {
            $newMigrations = false;
            foreach ($files as $file) {
                $name = str_replace('.php', '', basename($file));
                $time = explode('_', $name)[0];
                if (!isset($this->migrations[$name])) {
                    $author = 'Unknown';
                    $content = file_get_contents($file);
                    if (preg_match("/\\@author\\s+([^\n]+)/i", $content, $match)) {
                        $match = trim($match[1]);
                        if (!empty($match)) {
                            $author = $match;
                        }
                    }
                    $this->migrations[$name] = [
                        'id' => 0,
                        'time' => $time,
                        'name' => $name,
                        'status' => self::STATUS_INACTIVE,
                        'author' => $author
                    ];
                    $newMigrations = true;
                }
            }
            if ($newMigrations) $this->saveHistory();
        }
        ksort($this->migrations);
    }

    /**
     * @param $name
     */
    private function createMigration($name)
    {
        $time = time();
        $name = $time .'_' . str_replace([' '], ['_'], $name); // todo probably need better way to filter
        // create a migration file
        $file = MPATH . '/migrations/' . $name . '.php';
        if (is_file($file)) {
            ech("  Migration '{$name}' already exists!\n", 'red');
            $this->errorCode = 3;
            return;
        }
        $code = $this->getTemplate($name, $this->username);
        file_put_contents($file, $code);
        // add to cache
        $this->migrations[ $name ] = [
            'id' => 0,
            'time' => $time,
            'name' => $name,
            'status' => self::STATUS_INACTIVE,
            'author' => $this->username,
        ];
        $this->saveHistory();
        ech("   Migration '{$name}' created ", 'cyan');
        echo "({$file})\n";
    }

    /**
     * @param int $number
     */
    private function applyMigration($number = null)
    {
        $number = ($number === null) ? 99999 : $number;
        $migrations = [];
        foreach ($this->migrations as $name => $migration) {
            if ($migration['status'] == self::STATUS_INACTIVE || $migration['status'] == self::STATUS_FAILED) {
                $number--;
                $migrations[$name] = $migration;
            }
            if ($number == 0) break;
        }
        if (empty($migrations)) {
            ech("   Inactive migrations not found.\n", 'yellow');
            return;
        }
        ech("   New migrations to be applied:\n", 'cyan');
        foreach ($migrations as $migration) {
            ech("    {$migration['name']}\n", 'cyan');
        }
        $answer = input('    Apply these migrations? (yes|no) [y]: ', 'yellow');
        if (strtolower($answer) == 'y' || empty($answer)) {
            ech("\n");
            foreach ($migrations as $name => $migration) {
                ech("   Begin '{$migration['name']}' migration\n", 'cyan');
                $file = MPATH . '/migrations/' . $migration['name'] . '.php';
                if (!is_file($file)) {
                    ech("   Migration not found: '{$migration['name']}.php'\n", 'red');
                    ech("   if that file doesn't need anymore, then just delete 'migrations/.history' file and try again.\n", 'red');
                    $this->errorCode = 9;
                    return;
                }
                require($file);
                $className = 'migration_' . $migration['name'];
                if (class_exists($className)) {
                    $object = new $className($this->db);
                    /* @var $object MigrationObject */
                    if ($object->apply() === true) {
                        $this->migrations[$name]['status'] = self::STATUS_APPLIED;
                        $this->saveHistory();
                        ech("   Migration '{$migration['name']}' applied.\n", 'cyan');
                    } else {
                        $this->migrations[$name]['status'] = self::STATUS_FAILED;
                        $this->saveHistory();
                        ech("   Migration '{$migration['name']}' failed.\n", 'red');
                        $this->errorCode = 7;
                        return;
                    }
                } else {
                    ech("   Migration error. Class '{$className}' not found.\n", 'red');
                    $this->errorCode = 6;
                    return;
                }
            }
        }
    }

    /**
     * @param int $number
     */
    private function revertMigration($number = null)
    {
        $number = ($number === null) ? 1 : $number;
        $migrations = [];
        $revers = array_reverse($this->migrations);
        foreach ($revers as $migration) {
            if ($migration['status'] == self::STATUS_APPLIED) {
                $number--;
                $migrations[ $migration['name'] ] = $migration;
            }
            if ($number == 0) break;
        }
        if (empty($migrations)) {
            ech("   Active migrations not found.\n", 'yellow');
            return;
        }
        ech("   Migrations to be reverted:\n", 'cyan');
        foreach ($migrations as $migration) {
            ech("    {$migration['name']}\n", 'cyan');
        }
        $answer = input('    Revert these migrations? (yes|no) [y]: ', 'yellow');
        if (strtolower($answer) == 'y' || empty($answer)) {
            ech("\n");
            foreach ($migrations as $name => $migration) {
                ech("   Begin '{$migration['name']}' migration\n", 'cyan');
                $file = MPATH . '/migrations/' . $migration['name'] . '.php';
                if (!is_file($file)) {
                    ech("   Migration not found: '{$migration['name']}.php'\n", 'red');
                    ech("   if that file doesn't need anymore, then just delete 'migrations/.history' file and try again.\n", 'red');
                    $this->errorCode = 9;
                    return;
                }
                require($file);
                $className = 'migration_' . $migration['name'];
                if (class_exists($className)) {
                    $object = new $className($this->db);
                    /* @var $object MigrationObject */
                    if ($object->revert() === true) {
                        $this->migrations[$name]['status'] = self::STATUS_INACTIVE;
                        $this->saveHistory();
                        ech("   Migration '{$migration['name']}' reverted.\n", 'cyan');
                    } else {
                        $this->migrations[$name]['status'] = self::STATUS_FAILED;
                        $this->saveHistory();
                        ech("   Migration '{$migration['name']}' failed.\n", 'red');
                        $this->errorCode = 7;
                        return;
                    }
                } else {
                    ech("   Migration error. Class '{$className}' not found.\n", 'red');
                    $this->errorCode = 6;
                    return;
                }
            }
        }
    }

    /**
     * @param $number
     */
    private function deleteMigration($number = null)
    {
        $number = ($number === null) ? 1 : $number;
        $migrations = [];
        $revers = array_reverse($this->migrations);
        foreach ($revers as $name => $migration) {
            $number--;
            $migrations[ $name ] = $migration;
            if ($number == 0) break;
        }
        if (empty($migrations)) {
            ech("   Migrations not found.\n", 'yellow');
            return;
        }
        ech("   Will be removed:\n", 'yellow');
        foreach ($migrations as $name => $migration) {
            ech("      {$migration['name']} (" . date('d/m/Y', $migration['time']) . ")\n", 'white');
        }
        // ask user to confirm
        $ask = input("   Do you really want to delete them? (yes/no) [n]: ", 'red');
        if (strtolower($ask) == 'y') {
            foreach ($migrations as $name => $migration) {
                ech("   Deleting {$migration['name']}\n", 'yellow');
                $file = MPATH . '/migrations/' . $migration['name'] . '.php';
                if ($migration['status'] == self::STATUS_APPLIED) {
                    // need to revert first
                    if (!is_file($file)) {
                        ech("   Migration not found: '{$migration['name']}.php'\n", 'red');
                        $this->errorCode = 9;
                        return;
                    }
                    include($file);
                    $className = 'migration_' . $migration['name'];
                    if (class_exists($className)) {
                        $object = new $className($this->db); /* @var $object MigrationObject */
                        if ($object->revert() !== true) {
                            $this->migrations[ $name ]['status'] = self::STATUS_FAILED;
                            $this->saveHistory();
                            ech("   Revert migration {$migration['name']} failed.\n", 'red');
                            $this->errorCode = 7;
                            return;
                        }
                    } else {
                        ech("   Migration error. Class {$className} not found.\n", 'red');
                        $this->errorCode = 6;
                        return;
                    }
                }
                // remove file and history
                $this->migrations[ $name ]['id'] = -100;
                @unlink($file); // delete migrations file
                $this->saveHistory();
            }
            ech("   Completed\n", 'green');
        }
    }

    /**
     * @param int $num
     */
    private function migrationsStatuses($num = null)
    {
        $number = 0;
        $revers = array_reverse($this->migrations);
        $nameLength = 8;
        $authorLength = 10;
        $lines = [];
        foreach ($revers as $migration) {
            $number++;
            $migration['status_title'] = 'INACTIVE';
            if ($migration['status'] == self::STATUS_APPLIED) {
                $migration['status_title'] = 'APPLIED';
            } else if ($migration['status'] == self::STATUS_FAILED) {
                $migration['status_title'] = 'FAILED';
            }
            $migration['date_time'] = date('d/m/Y H:i:s', $migration['time']);
            $length = strlen($migration['name']);
            $nameLength = ($nameLength < $length) ? $length : $nameLength;
            $length = strlen($migration['author']);
            $authorLength = ($authorLength < $length) ? $length : $authorLength;
            $lines[] = $migration;
            if ($num > 0 && $number > $num) break;
        }
        if (empty($lines)) {
            ech("   Migrations not found.\n", 'yellow');
            return;
        }
        ech("   Migrations statuses\n\n", 'cyan');
        ech("   | DateTime            | Name " . str_repeat(' ', $nameLength - 5)
            . " | Author" . str_repeat(' ', $authorLength - 6) . " | Status    |\n", 'green');
        ech("   |---------------------+-" . str_repeat('-', $nameLength)
            . "-+-" . str_repeat('-', $authorLength) . "-+-----------|\n", 'green');
        $lines = array_reverse($lines);
        foreach ($lines as $line) {
            ech("   | {$line['date_time']} | {$line['name']}" . str_repeat(' ', $nameLength - strlen($line['name']))
                . " | {$line['author']}" . str_repeat(' ', $authorLength - strlen($line['author']))
                . " | {$line['status_title']}" . str_repeat(' ', 9 - strlen($line['status_title'])) . " |\n", 'green');
        }
        ech("   +---------------------+-" . str_repeat('-', $nameLength)
            . "-+-" . str_repeat("-", $authorLength) . "-+-----------+\n", 'green');
    }

    /**
     * Save .history of migrations
     */
    private function saveHistory()
    {
        ksort($this->migrations);
        foreach ($this->migrations as $k => $migration) {
            if ($migration['id'] === 0) {
                // new
                $prep = $this->db->prepare("INSERT INTO `{$this->table}` (`created_at`,`name`,`author`,`status`) "
                    . "VALUES (:time, :name, :author, :status)");
                $prep->execute([
                    ':time' => $migration['time'],
                    ':name' => $migration['name'],
                    ':author' => $migration['author'],
                    ':status' => $migration['status'],
                ]);
                // get inserted id
                $sth = $this->db->query('SELECT LAST_INSERT_ID()');
                $newId = $sth->fetchColumn();
                $this->migrations[$k]['id'] = $newId;
            } else if ($migration['id'] === -100) {
                // delete
                $prep = $this->db->prepare("DELETE FROM `{$this->table}` WHERE `id` = :id");
                $prep->execute([':id' => $migration['id']]);
            } else {
                // update
                $prep = $this->db->prepare("UPDATE `{$this->table}` SET `status` = :status WHERE `id` = :id");
                $prep->execute([':id' => $migration['id'], ':status' => $migration['status']]);
            }
        }
    }

    /**
     * Creates soft link for Composer installation case
     */
    public function createSoftLink()
    {
        if (stripos(__DIR__, 'vendor/adamasantares/migra-php') !== false) {
            shell_exec('ln -s ' . __FILE__ . ' ' . __DIR__ . '/../../../migra');
            shell_exec('chmod +x ' . __DIR__ . '/../../../migra');
            if (is_file(__DIR__ . '/../../../migra')) {
                ech("   Soft link ./migra created\n", 'cyan');
                ech("   Now you can use './migra' command from project's root folder\n", 'cyan');
            } else {
                ech("   Some problem on soft link creation.\n", 'red');
            }
        } else {
            ech("   No need to create soft link, you don't use Composer installation.\n", 'cyan');
        }
    }

    /**
     * Template of migration
     * @param string $name
     * @param string $username
     * @return string
     */
    public static function getTemplate($name, $username = '')
    {
        $tmpl = <<<TMPL
<?php
/**
 * Migration {$name}
 * @author {$username}
 */

class migration_{$name} extends MigrationObject
{

    function apply()
    {
//      todo your code here
//      examples:
//      \$this->createTable('test', [
//          "`id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT",
//          "`str` VARCHAR(120) NOT NULL",
//          "`num` FLOAT NOT NULL",
//          "`num2` INT NOT NULL DEFAULT '0'",
//      ]);
//      \$this->addColumn('test', 'column_name',  "TEXT NOT NULL AFTER `str`");
//      \$this->renameColumn('test', 'column', 'created_at');
//      \$this->retypeColumn('test', 'created_at', 'int(11)', false, '1481383022');
//      \$this->execute("INSERT INTO `test` (`str`, `num`, `created_at`) VALUES ('pum purum', '12.5', time())");
        return true; //if the method doesn't return true, then migration is failed
    }

    function revert()
    {
//      todo your code here
//      \$this->dropTable('table_name');
//      \$this->dropColumn('table_name', 'column_name');
        return true;
    }

}
TMPL;
        return $tmpl;
    }

}

/**
 * Class MigrationObject
 */
class MigrationObject {

    const ROWS = 'rows';
    const ROW = 'row';
    const COL = 'col';
    const VALUE = 'value';

    /** @var PDO */
    private $db = null;


    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Apply migration
     * @return bool
     */
    public function apply()
    {
        return false;
    }

    /**
     * Revert migration
     * @return bool
     */
    public function revert()
    {
        return false;
    }


    /**
     * @return array
     */
    public function isTablesExists($name)
    {
        $tables = $this->query("SHOW TABLES");
        foreach($tables as $table) {
            $table = array_shift($table);
            if ($table == $name) return true;
        }
        return false;
    }


    /**
     * Simple filtering of table name
     * @param string $table
     * @return string
     */
    public function filterName($table)
    {
        return trim($this->db->quote($table), "'");
    }


    /**
     * Executes an sql query
     * @param string $sql
     * @param array $params [':param' => 'value', ':param2' => 'value2', ...]
     * @param bool $mute
     * @return integer Number or affected rows
     */
    public function execute($sql, $params = [], $mute = false)
    {
        $st = $this->db->prepare($sql);
        $res = $st->execute($params);
        if ($res === false) {
            $code = $st->errorCode();
            $message = $st->errorInfo();
            echo $mute ? '' : "ERROR on: '{$sql}'\nCode: {$code}\nInfo: '{$message[2]}'\n";
            return false;
        }
        return $res;
    }

    /**
     * Executes an sql query and return result rows
     * @param string $sql
     * @param array $params [':param' => 'value', ':param2' => 'value2', ...]
     * @param string $return Constant of class ( ::ROWS | ::ROW | ::COL | ::VALUE ) ROWS by default
     * @param bool $mute
     * @return mixed
     */
    public function query($sql, $params = [], $return = self::ROWS, $mute = false)
    {
        $st = $this->db->prepare($sql);
        $res = $st->execute($params);
        if ($res === false) {
            $code = $st->errorCode();
            $message = $st->errorInfo();
            echo $mute ? '' : "ERROR on: '{$sql}'\nCode: {$code}\nInfo: '{$message[2]}'\n";
            return [];
        }
        if ($return == 'row') {
            $rows = $st->fetch(PDO::FETCH_ASSOC);
        } else if ($return == 'col') {
            $rows = $st->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_COLUMN);
        } else if ($return == 'value') {
            $rows = $st->fetch(PDO::FETCH_COLUMN);
            $rows = $rows[0];
        } else {
            $rows = $st->fetchAll(PDO::FETCH_ASSOC);
        }
        unset($st);
        return $rows;
    }

    /**
     * Creates new table (if not exists)
     * @param string $name Table name
     * @param array $columns Example: ['`id` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT', '`str` varchar(120) NOT NULL']
     * @param string $options Default: 'ENGINE=InnoDB DEFAULT CHARSET=utf8'
     */
    public function createTable($name, $columns, $options = 'ENGINE=InnoDB DEFAULT CHARSET=utf8')
    {
        $name = $this->filterName($name);
        $sql = "CREATE TABLE IF NOT EXISTS `{$name}` (" . implode(', ', $columns) . ") {$options}";
        if ($this->execute($sql)) {
            ech("      Table '{$name}' created\n", 'green');
        } else {
            ech("      Fail on table '{$name}' creation\n", 'red');
        }
    }

    /**
     * Renames table
     * @param string $name
     * @param string $newName
     */
    public function renameTable($name, $newName)
    {
        $name = $this->filterName($name);
        $newName = $this->filterName($newName);
        if (!$this->isTablesExists($name)) {
            ech("      Cannot rename table '{$name}' because it doesn't exists\n", 'red');
        }
        $sql = "RENAME TABLE {$name} TO {$newName};";
        if ($this->execute($sql)) {
            ech("      Table '{$name}' was renamed to {$newName}\n", 'green');
        } else {
            ech("      Fail on renaming table '{$name}'\n", 'red');
        }
    }

    /**
     * Drops table if exists
     * @param string $name
     */
    public function dropTable($name)
    {
        $name = $this->filterName($name);
        if (!$this->isTablesExists($name)) {
            ech("      Cannot delete table '{$name}' because it doesn't exists\n", 'red');
        }
        $sql = "DROP TABLE IF EXISTS `{$name}`";
        if ($this->execute($sql)) {
            ech("      Table '{$name}' was deleted\n", 'green');
        } else {
            ech("      Fail on deleting table '{$name}'\n", 'red');
        }
    }

    /**
     * @param string $table
     * @param string $column
     * @param string $type
     */
    public function addColumn($table, $column, $type)
    {
        $table = $this->filterName($table);
        $column = $this->filterName($column);
        if (!$this->isTablesExists($table)) {
            ech("      Cannot add new column '{$column}' because table '{$table}' doesn't exists\n", 'red');
        }
        // check column
        $row = $this->query("SHOW COLUMNS FROM {$table}", [], self::ROWS, true);
        foreach ($row as $col) {
            if ($col['Field'] == $column) {
                ech("      Column '{$column}' already exists\n", 'yellow');
                return;
            }
        }
        if ($this->execute("ALTER TABLE `{$table}` ADD `{$column}` {$type}")) {
            ech("      Column '{$column}' created\n", 'green');
        } else {
            ech("      Fail on column '{$column}' creation\n", 'red');
        }
    }

    /**
     * @param string $table
     * @param string $column
     */
    public function dropColumn($table, $column)
    {
        $table = $this->filterName($table);
        $column = $this->filterName($column);
        if (!$this->isTablesExists($table)) {
            ech("      Cannot delete column '{$column}' because table '{$table}' doesn't exists\n", 'red');
        }
        // check column
        $row = $this->query("SHOW COLUMNS FROM {$table}", [], self::ROWS, true);
        $isExist = false;
        foreach ($row as $col) {
            if ($col['Field'] == $column) {
                $isExist = true;
            }
        }
        if ($isExist) {
            if ($this->execute("ALTER TABLE `{$table}` DROP `{$column}`")) {
                ech("      Column '{$column}' deleted\n", 'green');
            } else {
                ech("      Fail on column '{$column}' deleted\n", 'red');
            }
        } else {
            ech("      Not found '{$column}' column in '{$table}' table.\n", 'red');
        }
    }

    /**
     * @param string $table
     * @param string $column
     * @param string $newName
     */
    public function renameColumn($table, $column, $newName)
    {
        $table = $this->filterName($table);
        $column = $this->filterName($column);
        if (!$this->isTablesExists($table)) {
            ech("      Cannot rename column '{$column}' because table '{$table}' doesn't exists\n", 'red');
        }
        // check column
        $row = $this->query("SHOW COLUMNS FROM {$table}", [], self::ROWS, true);
        $isExist = false;
        $type = '';
        $isNull = '';
        $default = '';
        foreach ($row as $col) {
            if ($col['Field'] == $column) {
                $type = $col['Type'];
                $isNull = ($col['Null'] == 'NO') ? ' NOT NULL' : '';
                $default = empty($col['Default']) ? '' : " DEFAULT '{$col['Default']}'";
                $isExist = true;
            }
        }
        if ($isExist) {
            // ALTER TABLE `demo` CHANGE `col3` `col4` VARCHAR(30) NOT NULL DEFAULT 'abc';
            if ($this->execute("ALTER TABLE `{$table}` CHANGE `{$column}` `{$newName}` {$type} {$isNull} {$default}")) {
                ech("      Column '{$column}' renamed to '{$newName}'\n", 'green');
            } else {
                ech("      Fail rename of '{$column}'\n", 'red');
            }
        } else {
            ech("      Not found '{$column}' column in '{$table}' table.\n", 'red');
        }
    }

    /**
     * Changes a type of column
     * @param string $table
     * @param string $column
     * @param string $newType
     * @param bool $null
     * @param string $default
     */
    public function retypeColumn($table, $column, $newType, $null = false, $default = '')
    {
        $table = $this->filterName($table);
        $column = $this->filterName($column);
        if (!$this->isTablesExists($table)) {
            ech("      Cannot ''retype'' column '{$column}' because table '{$table}' doesn't exists\n", 'red');
        }
        // check column
        $row = $this->query("SHOW COLUMNS FROM {$table}", [], self::ROWS, true);
        $isExist = false;
        $null = $null ? 'NULL' : 'NOT NULL';
        $default = empty($default) ? '' : 'DEFAULT ' . $this->db->quote($default);
        foreach ($row as $col) {
            if ($col['Field'] == $column) {
                $isExist = true;
            }
        }
        if ($isExist) {
            // ALTER TABLE `demo` CHANGE `col3` `col4` VARCHAR(30) NOT NULL DEFAULT 'abc';
            if ($this->execute("ALTER TABLE `{$table}` CHANGE `{$column}` `{$column}` {$newType} {$null} {$default}")) {
                ech("      Column '{$column}' changed to '{$newType} {$null} {$default}'\n", 'green');
            } else {
                ech("      Fail change of '{$column}'\n", 'red');
            }
        } else {
            ech("      Not found '{$column}' column in '{$table}' table.\n", 'red');
        }
    }

    /**
     * Inserts rows
     * @param string $table
     * @param array $columns ['column1' => 'value1', 'column2' => 'value2']
     */
    public function insert($table, $columns = [])
    {
        $table = $this->filterName($table);
        if (!$this->isTablesExists($table)) {
            ech("      Cannot insert row because table '{$table}' doesn't exists\n", 'red');
        }
        if (!empty($columns)) {
            $params = $markers = [];
            foreach ($columns as $col => $value) {
                $params[ ':' . $col ] = $value;
                $markers[] = ':' . $col;
            }
            $markers = implode(" , ", $markers);
            $columns = array_keys($columns);
            $columns = "`" . implode("`,`", $columns) . "`";
            $sql = "INSERT INTO {$table} ({$columns}) VALUES ({$markers})";
            $st = $this->db->prepare($sql);
            $res = $st->execute($params);
            if ($res === false) {
                $code = $st->errorCode();
                $message = $st->errorInfo();
                ech("ERROR on: '{$sql}'\nCode: {$code}\nInfo: '{$message[2]}'\n", 'red');
                return;
            }
            ech("      Inserted row #" . $this->db->lastInsertId() . "\n", 'green');
        }
    }

    /**
     * Updates row
     * @param string $table
     * @param array $columns ['column3' => 'new_value']
     * @param string $condition "column = value OR column2 > 10"
     */
    public function update($table, $columns = [], $condition = "")
    {
        $table = $this->filterName($table);
        if (!$this->isTablesExists($table)) {
            ech("      Cannot update row because table '{$table}' doesn't exists\n", 'red');
        }
        if (!empty($columns)) {
            $pairs = [];
            $params = [];
            foreach ($columns as $col => $value) {
                $params[ ':' . $col ] = $value;
                $pairs[] = "`{$col}` = " .  ':' . $col;
            }
            $pairs = implode(" ,", $pairs);
            $sql = "UPDATE {$table} SET {$pairs} " . (empty($condition) ? '' : "WHERE {$condition}");
            $st = $this->db->prepare($sql);
            $res = $st->execute($params);
            if ($res === false) {
                $code = $st->errorCode();
                $message = $st->errorInfo();
                ech("ERROR on: '{$sql}'\nCode: {$code}\nInfo: '{$message[2]}'\n", 'red');
                return;
            }
            ech("      Updated " . $st->rowCount() . " rows\n", 'green');
        }
    }

    /**
     * Deletes rows
     * @param string $table
     * @param string $condition "column = value OR column2 > 10"
     */
    public function delete($table, $condition)
    {
        $table = $this->filterName($table);
        if (!$this->isTablesExists($table)) {
            ech("      Cannot delete row(s) because table '{$table}' doesn't exists\n", 'red');
        }
        $sql = "DELETE FROM {$table} WHERE {$condition}";
        $st = $this->db->prepare($sql);
        $res = $st->execute();
        if ($res === false) {
            $code = $st->errorCode();
            $message = $st->errorInfo();
            ech("ERROR on: '{$sql}'\nCode: {$code}\nInfo: '{$message[2]}'\n", 'red');
            return;
        }
        ech("      Deleted rows " . $st->rowCount() . " rows\n", 'green');
    }

}

/**
 * @param String $str
 * @param String $color 'black', 'dark_gray', 'blue', 'light_blue', 'green', 'light_green',
 *      'cyan', 'light_cyan', 'red', 'light_red', 'purple', 'light_purple', 'brown', 'yellow', 'light_gray', 'white'
 * @param String $background 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'light_gray'
 */
function ech($str, $color = '', $background = 'black')
{
        $colors = ['black' => '0;30', 'dark_gray' => '1;30', 'blue' => '0;34',
            'light_blue' => '1;34', 'green' => '0;32', 'light_green' => '1;32',
            'cyan' => '0;36', 'light_cyan' => '1;36', 'red' => '0;31',
            'light_red' => '1;31', 'purple' => '0;35', 'light_purple' => '1;35',
            'brown' => '0;33', 'yellow' => '1;33', 'light_gray' => '0;37', 'white' => '1;37'];
        $backgrounds = ['black' => '30', 'red' => '41', 'green' => '42', 'yellow' => '43',
            'blue' => '44', 'magenta' => '45', 'cyan' => '46', 'light_gray' => '47'];
        if (!empty($colors[$color])) {
            $str = "\033[" . $colors[$color] . "m" . $str;
        }
        if (!empty($backgrounds[$background])) {
            $str = "\033[" . $backgrounds[$background] . "m" . $str;
        }
        echo $str . "\033[0m";
}

/**
 * Reads line from terminal
 * @param $prompt
 * @param string $color
 * @return string
 */
function input($prompt, $color = '')
{
    ech($prompt, $color);
    if (PHP_OS == 'WINNT') {
        $line = stream_get_line(STDIN, 1024, PHP_EOL);
    } else {
        $line = readline('');
    }
    return $line;
}


// === execute ===
if (php_sapi_name() === 'cli') {
    $migrate = new MigraPhp($argv);
    exit($migrate->getErrorCode());
}
